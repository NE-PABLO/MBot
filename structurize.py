import os

def create_structure(base_path):
    structure = {
        "экзамены": {
            "огэ": {},
            "егэ": {
                "Кодификатор2025": {
                    "МЕХАНИКА": {
                        "КИНЕМАТИКА": [
                            "Материальная_точка.py",
                            "Скорость_материальной_точки.py",
                            "Ускорение_материальной_точки.py",
                            "Равномерное_прямолинейное_движение.py",
                            "Равноускоренное_прямолинейное_движение.py",
                            "Свободное_падение.py",
                            "Криволинейное_движение.py"
                        ],
                        "ДИНАМИКА": [
                            "Масса_тела.py",
                            "Принцип_суперпозиции_сил.py",
                            "Второй_закон_Ньютона.py",
                            "Третий_закон_Ньютона.py",
                            "Закон_всемирного_тяготения.py",
                            "Сила_тяжести.py",
                            "Сила_упругости.py",
                            "Сила_трения.py",
                            "Давление.py"
                        ],
                        "СТАТИКА": [
                            "Момент_силы.py",
                            "Центр_масс_тела.py",
                            "Условия_равновесия.py",
                            "Давление_в_жидкости.py",
                            "Закон_Архимеда.py"
                        ],
                        "ЗАКОНЫ_СОХРАНЕНИЯ_В_МЕХАНИКЕ": [
                            "Импульс_материальной_точки.py",
                            "Закон_изменения_и_сохранения_импульса.py",
                            "Работа_силы.py",
                            "Мощность_силы.py",
                            "Кинетическая_энергия.py",
                            "Потенциальная_энергия.py",
                            "Закон_изменения_и_сохранения.py"
                        ],
                        "МЕХАНИЧЕСКИЕ_КОЛЕБАНИЯ_И_ВОЛНЫ": [
                            "Гармонические_колебания.py",
                            "Период_и_частота_колебаний.py",
                            "Скорость_распространения_и_длина_волны.py"
                        ]
                    },
                    "МОЛЕКУЛЯРНАЯ_ФИЗИКА": [
                        "Количество_вещества.py",
                        "Основное_уравнение_МКТ.py",
                        "Связь_температуры_газа_со_средней_кинетической_энергией.py",
                        "Уравнение_Менделеева_–_Клапейрона_(применимые_формы_записи).py",
                        "Влажность_воздуха.py",
                        "Изопроцессы.py"
                    ],
                    "ТЕРМОДИНАМИКА": [
                        "Первый_закон_термодинамики.py",
                        "Принципы_действия_тепловых_машин.py",
                        "Максимальное_значение_КПД.py"
                    ],
                    "ЭЛЕКТРОДИНАМИКА": {
                        "ЭЛЕКТРИЧЕСКОЕ_ПОЛЕ": [
                            "Взаимодействие_зарядов.py",
                            "Напряжённость_электрического_поля.py",
                            "Потенциальность_электростатического_поля.py",
                            "Электроёмкость_плоского_конденсатора.py",
                            "Соединение_конденсаторов.py",
                            "Энергия_заряженного_конденсатора.py"
                        ],
                        "ЗАКОНЫ_ПОСТОЯННОГО_ТОКА": [
                            "Сила_тока.py",
                            "Электрическое_сопротивление.py",
                            "ЭДС.py",
                            "Закон_Ома_для_полной.py",
                            "Соединение_проводников.py",
                            "Работа_электрического_тока.py",
                            "Закон_Джоуля_–_Ленца.py",
                            "Мощность_тока.py"
                        ]
                    },
                    "keyboard.py": None,
                }
            }
        }
    }

    def create_items(path, items):
        for name, content in items.items():
            item_path = os.path.join(path, name)
            
            if isinstance(content, dict):  # Это папка с вложениями
                os.makedirs(item_path, exist_ok=True)
                print(f"Создана папка: {item_path}")
                if content:  # Если есть внутреннее содержимое
                    create_items(item_path, content)
            elif isinstance(content, list):  # Это папка с файлами
                os.makedirs(item_path, exist_ok=True)
                print(f"Создана папка: {item_path}")
                for file in content:
                    file_path = os.path.join(item_path, file)
                    open(file_path, 'w').close()
                    print(f"Создан файл: {file_path}")
            elif content is None:  # Это файл
                open(item_path, 'w').close()
                print(f"Создан файл: {item_path}")

    create_items(base_path, structure)

def main():
    base_dir = input("Введите путь для создания структуры: ").strip()
    
    if not os.path.exists(base_dir):
        print("Ошибка: указанная директория не существует!")
        return
    
    try:
        create_structure(base_dir)
        print("\nСтруктура успешно создана!")
    except Exception as e:
        print(f"\nОшибка при создании структуры: {str(e)}")

if __name__ == "__main__":
    main()