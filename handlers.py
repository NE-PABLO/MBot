"""# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –º–æ–¥—É–ª–µ–π
import os
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import *
from difflib import get_close_matches

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from config import BASE_IMAGE_PATH
from states import user_states, previous_states, state_keyboards, user_state_stack, SEARCH_KEYWORDS

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
from keyboardsKLAV import *

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
import keyboardsKOMMENT.komment as kb

from formulas import *

from fuzzywuzzy import process, fuzz

# ========================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô
# ========================================================

# --------------------- –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ----------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞
@router.message(Command("poisk"))
@router.message(F.text.casefold() == "–ø–æ–∏—Å–∫")
async def start_search(message: Message):
    user_id = message.from_user.id
    update_user_state(user_id, 'search') # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_user_state –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start(message: Message):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ start –≤—ã–∑–≤–∞–Ω!")
    user_id = message.from_user.id
    user_state_stack[user_id] = ['main']
    user_states[user_id] = 'main'
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ñ–∏–∑–∏–∫–∏:",
        reply_markup=get_main_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_state(user_id, new_state):
    if user_id not in user_state_stack:
        user_state_stack[user_id] = ['main'] # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å main, –µ—Å–ª–∏ —Å—Ç–µ–∫–∞ –Ω–µ—Ç
    
    current_stack = user_state_stack[user_id]
    if not current_stack or current_stack[-1] != new_state:
        current_stack.append(new_state)
    
    user_states[user_id] = new_state

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_button_handler(message: Message):
    user_id = message.from_user.id
    current_stack = user_state_stack.get(user_id, [])
    
    if len(current_stack) > 1:
        current_stack.pop()
        previous_actual_state = current_stack[-1]
        user_states[user_id] = previous_actual_state
    else:
        user_states[user_id] = 'main'
        user_state_stack[user_id] = ['main']

    current_state_for_keyboard = user_states[user_id]
    
    if current_state_for_keyboard in state_keyboards:
        keyboard_func = state_keyboards[current_state_for_keyboard]
        reply_text = f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è..."
        if current_state_for_keyboard == 'main':
            reply_text = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
        else:
            # –ë–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
            state_to_title = {
                'exams_type_selection': "–í—ã–±–æ—Ä —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞",
                'ege_options': "–ï–ì–≠",
                'ege_codificator_physics_sections': "–†–∞–∑–¥–µ–ª—ã —Ñ–∏–∑–∏–∫–∏ (–ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ï–ì–≠)",
                'ege_codificator_mechanics_topics': "–¢–µ–º—ã –ø–æ –ú–µ—Ö–∞–Ω–∏–∫–µ (–ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ï–ì–≠)",
                # ... –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            }
            reply_text = state_to_title.get(current_state_for_keyboard, f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª: {current_state_for_keyboard}")
        await message.answer(reply_text, reply_markup=keyboard_func())
    else:
        user_states[user_id] = 'main'
        user_state_stack[user_id] = ['main']
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ.",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_handler(message: Message):
    user_id = message.from_user.id
    user_states[user_id] = 'main'
    user_state_stack[user_id] = ['main']
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
async def handle_message_with_state(message: Message, state: str, reply_text: str, keyboard_func):
    user_id = message.from_user.id
    update_user_state(user_id, state)
    await message.answer(reply_text, reply_markup=keyboard_func())

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def send_image_formula(message: Message, folder: str, filename: str, caption: str):
    try:
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è —Ñ–æ—Ä–º—É–ª —ç–∫–∑–∞–º–µ–Ω–æ–≤ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å
        # –ù–∞–ø—Ä–∏–º–µ—Ä, /home/ubuntu/twoversion_extracted/twoversion/—ç–∫–∑–∞–º–µ–Ω—ã/–µ–≥—ç/–ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä2025/–ú–ï–•–ê–ù–ò–ö–ê/–ö–ò–ù–ï–ú–ê–¢–ò–ö–ê/filename.py (—Ç—É—Ç .py, –∞ –Ω–µ .jpg)
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª "—Ñ–æ—Ç–æ —Å–∞–º –¥–æ–±–∞–≤–ª—é", –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ .py —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º, –∞ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ —ç—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.
        image_path = os.path.join(BASE_IMAGE_PATH, folder, filename) # BASE_IMAGE_PATH –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–æ–≤
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        # if not os.path.exists(image_path):
        #     # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–æ–≤, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥—Ä—É–≥–∞—è
        #     alt_image_path = os.path.join("/home/ubuntu/twoversion_extracted/twoversion/—ç–∫–∑–∞–º–µ–Ω—ã/–µ–≥—ç/–ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä2025", folder, filename)
        #     if os.path.exists(alt_image_path):
        #         image_path = alt_image_path
        #     else:
        #         await message.answer(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {filename}")
        #         return

        photo = FSInputFile(image_path)
        await message.answer_photo(photo, caption=caption)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ó–î–ï–õ–ê "–≠–ö–ó–ê–ú–ï–ù–´" ---
@router.message(F.text == "–≠–∫–∑–∞–º–µ–Ω—ã")
async def exams_handler(message: Message):
    await handle_message_with_state(
        message,
        state="exams_type_selection",
        reply_text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞:",
        keyboard_func=get_exams_type_keyboard
    )

@router.message(F.text == "–ï–ì–≠")
async def ege_handler(message: Message):
    await handle_message_with_state(
        message,
        state="ege_options",
        reply_text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ï–ì–≠:",
        keyboard_func=get_ege_options_keyboard
    )

@router.message(F.text == "–û–ì–≠")
async def oge_handler(message: Message):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –û–ì–≠ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
    await message.answer("–†–∞–∑–¥–µ–ª –û–ì–≠ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=get_exams_type_keyboard()) # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
    # update_user_state(message.from_user.id, 'exams_type_selection') # –Ø–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

@router.message(F.text == "–ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ï–ì–≠")
async def ege_codificator_handler(message: Message):
    user_id = message.from_user.id
    update_user_state(user_id, "ege_codificator_physics_sections")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    codificator_file_path = "/home/ubuntu/twoversion_extracted/twoversion/—ç–∫–∑–∞–º–µ–Ω—ã/–µ–≥—ç/–ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä2025/–ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä2025.pdf" # –ü—Ä–∏–º–µ—Ä –ø—É—Ç–∏, –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(codificator_file_path):
            document = FSInputFile(codificator_file_path)
            await message.answer_document(document, caption="–§–∞–π–ª –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ï–ì–≠")
        else:
            await message.answer("–§–∞–π–ª –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {str(e)}")
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ñ–∏–∑–∏–∫–∏ –∏–∑ –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ï–ì–≠:",
        reply_markup=get_ege_codificator_physics_sections_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ —Ñ–∏–∑–∏–∫–∏ –≤ –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ –ï–ì–≠
@router.message(F.text == "–ú–µ—Ö–∞–Ω–∏–∫–∞ (–ï–ì–≠ –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä)")
async def ege_codificator_mechanics_handler(message: Message):
    await handle_message_with_state(
        message,
        state="ege_codificator_mechanics_topics",
        reply_text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ (–ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ï–ì–≠):",
        keyboard_func=get_ege_codificator_mechanics_topics_keyboard
    )

# TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Ñ–∏–∑–∏–∫–∏ (–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è, –¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞, –≠–ª–µ–∫—Ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞)
# –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å ege_codificator_mechanics_handler

# --- –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –î–õ–Ø –†–ê–ó–î–ï–õ–ê "–≠–ö–ó–ê–ú–ï–ù–´" ---


# --- –°–¢–ê–†–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–û–°–ù–û–í–ù–´–ï –†–ê–ó–î–ï–õ–´ –§–ò–ó–ò–ö–ò) ---
@router.message(F.text == "–ú–µ—Ö–∞–Ω–∏–∫–∞")
async def mechanics_handler(message: Message):
    await handle_message_with_state(
        message,
        state="mechanics",
        reply_text="–†–∞–∑–¥–µ–ª –º–µ—Ö–∞–Ω–∏–∫–∏:",
        keyboard_func=get_mechanics_keyboard
    )

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@router.message(F.text == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ—Å—Ç–≤–∞")
async def kolichestvo_veshestva_handler(message: Message):
    await send_image_formula(
        message,
        folder="–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞",
        filename="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–µ—â–µ—Å—Ç–≤–∞.jpg",
        caption="–ü–æ–Ω—è—Ç–∏–µ '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ—Å—Ç–≤–∞'"
    )

@router.message(F.text == "–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞")
async def kinematics_handler(message: Message):
    await handle_message_with_state(message, 'kinematics', "–†–∞–∑–¥–µ–ª –∫–∏–Ω–µ–º–∞—Ç–∏–∫–∏:", get_kinematics_keyboard)

@router.message(F.text == "–ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")
async def uniform_motion_handler(message: Message):
    await handle_message_with_state(message, 'uniform_motion', "–§–æ—Ä–º—É–ª—ã –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è:", get_ravnomernoe_keyboard)

@router.message(F.text == "–ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ–µ —Ä–∞–≤–Ω–æ—É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")
async def ravnoyskorenoe_handler(message: Message):
    await handle_message_with_state(message, 'ravnoyskorenoe', "–§–æ—Ä–º—É–ª—ã –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ—É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è:", get_ravnoyskorenoe_keyboard)

@router.message(F.text == "–°–≤–æ–±–æ–¥–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ")
async def svobodnoe_padenie_handler(message: Message):
    await handle_message_with_state(message, 'svobodnoe_padenie', "–§–æ—Ä–º—É–ª—ã —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è:", get_svobodnoe_padenie_keyboard)

@router.message(F.text == "–î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏")
async def ravnomernoe_dvizhenie_po_okruzhnosti_handler(message: Message):
    await handle_message_with_state(message, 'ravnomernoe_dvizhenie_po_okruzhnosti', "–§–æ—Ä–º—É–ª—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏:", get_ravnomernoe_dvizhenie_po_okruzhnosti_keyboard)

@router.message(F.text == "–î–∏–Ω–∞–º–∏–∫–∞")
async def dinamika_handler(message: Message):
    await handle_message_with_state(message, 'dinamika', "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É:", get_dinamika_keyboard)

@router.message(F.text == "–ó–∞–∫–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –º–µ—Ö–∞–Ω–∏–∫–µ")
async def zakony_sohraneniya_handler(message: Message):
    await handle_message_with_state(message, 'zakony_sohraneniya', "–§–æ—Ä–º—É–ª—ã –∑–∞–∫–æ–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –º–µ—Ö–∞–Ω–∏–∫–µ:", get_zakony_sohraneniya_keyboard)

@router.message(F.text == "–°—Ç–∞—Ç–∏–∫–∞")
async def statika_handler(message: Message):
    await handle_message_with_state(message, 'statika', "–§–æ—Ä–º—É–ª—ã —Å—Ç–∞—Ç–∏–∫–∏:", get_statika_keyboard)

@router.message(F.text == "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –∏ –≤–æ–ª–Ω—ã")
async def mech_kolebaniya_i_volny_handler(message: Message):
    await handle_message_with_state(message, 'mechanicheskie_kolebaniya_i_volny', "–§–æ—Ä–º—É–ª—ã –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π –∏ –≤–æ–ª–Ω:", get_mechanicheskie_kolebaniya_i_volny_keyboard)

@router.message(F.text == "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞")
async def molekylarn_handler(message: Message):
    user_id = message.from_user.id
    update_user_state(user_id, 'molekylarn')
    image_path = os.path.join(BASE_IMAGE_PATH, "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞", "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è_—Ñ–∏–∑–∏–∫–∞.jpg")
    try:
        photo = FSInputFile(image_path)
        await message.answer_photo(photo, caption="–†–∞–∑–¥–µ–ª –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π —Ñ–∏–∑–∏–∫–∏", reply_markup=get_molekylarn_keyboard())
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        await message.answer("–†–∞–∑–¥–µ–ª –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π —Ñ–∏–∑–∏–∫–∏:", reply_markup=get_molekylarn_keyboard())

@router.message(F.text == "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞")
async def thermodynamics_handler(message: Message):
    await handle_message_with_state(message, 'thermodynamics', "–†–∞–∑–¥–µ–ª —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∏:", get_thermodynamics_keyboard)

@router.message(F.text == "–≠–ª–µ–∫—Ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞")
async def electrodynamics_handler(message: Message):
    await handle_message_with_state(message, 'electrodynamics', "–†–∞–∑–¥–µ–ª —ç–ª–µ–∫—Ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∏:", get_electrodynamics_keyboard)

@router.message(F.text == "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ")
async def electric_field_handler(message: Message):
    await handle_message_with_state(message, 'electric_field', "–§–æ—Ä–º—É–ª—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—è:", get_electric_field_keyboard)

@router.message(F.text == "–ó–∞–∫–æ–Ω—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞")
async def laws_of_constant_current_handler(message: Message):
    await handle_message_with_state(message, 'laws_of_constant_current', "–§–æ—Ä–º—É–ª—ã –∑–∞–∫–æ–Ω–æ–≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞:", get_zakon_postoinogo_toka_keyboard)

@router.message(F.text == "–ú–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∏–Ω–¥—É–∫—Ü–∏—è")
async def magnetic_field_and_electromagnetic_induction_handler(message: Message):
    await handle_message_with_state(message, 'magnetic_field_and_electromagnetic_induction', "–§–æ—Ä–º—É–ª—ã –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—è –∏ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∏–Ω–¥—É–∫—Ü–∏–∏:", get_magnetic_field_and_electromagnetic_induction_keyboard)

@router.message(F.text == "–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –∏ –≤–æ–ª–Ω—ã") 
async def electromagnetic_oscillations_and_waves_handler(message: Message):
    await handle_message_with_state(message, 'electromagnetic_oscillations_and_waves', "–§–æ—Ä–º—É–ª—ã —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π –∏ –≤–æ–ª–Ω:", get_electromagnetic_oscillations_and_waves_keyboard)

@router.message(F.text == "–û–ø—Ç–∏–∫–∞")
async def optics_handler(message: Message):
    await handle_message_with_state(message, 'optics', "–†–∞–∑–¥–µ–ª –æ–ø—Ç–∏–∫–∏:", get_optics_keyboard)

@router.message(F.text == "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞")
async def quantum_physics_handler(message: Message):
    await handle_message_with_state(message, 'quantum_physics', "–†–∞–∑–¥–µ–ª –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–∏:", get_quantum_physics_keyboard)

@router.message(F.text == "–Ø–¥–µ—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞")
async def nuclear_physics_handler(message: Message):
    await handle_message_with_state(message, 'nuclear_physics', "–†–∞–∑–¥–µ–ª —è–¥–µ—Ä–Ω–æ–π —Ñ–∏–∑–∏–∫–∏:", get_nuclear_physics_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ "–Ø –Ω–µ —Ö–æ—á—É" (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å)
@router.message(F.text == "üé§ –í–∞—à –º–µ–≥–∞-–∫–æ–º–º–µ–Ω—Ç")
async def kommentarii_handler(message: Message):
    await message.reply("üëÄ –ü–æ–π–º–∞–ª –±–∞–≥? –ü—Ä–∏–¥—É–º–∞–ª –∫—Ä—É—Ç—É—é —Ñ–∏—á—É?\n"
    "üî• –ñ–≥–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö ‚Äî –æ–±—Å—É–¥–∏–º!\n\n"
    "üí° –¢–æ–ø-3 —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã:\n"
    "1. \"–ü–æ—á–µ–º—É –±–æ—Ç –Ω–µ...\" üêõ ‚Äî –±–∞–≥–∏\n"
    "2. \"–ê —Å–¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫, —á—Ç–æ–±—ã...\" üöÄ ‚Äî –∏–¥–µ–∏\n"
    "3. \"–í–æ–æ–±—â–µ –æ–≥–æ–Ω—å, –Ω–æ...\" üî• ‚Äî –æ—Ç–∑—ã–≤—ã\n\n"
    "üìå –ü–∏—à–∏ –∫–∞–∫ –µ—Å—Ç—å: —Å –º–∞—Ç–∞–º–∏ (–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö), —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏–ª–∏ –¥–∞–∂–µ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏.\n\n"
    "‚ñÑÔ∏ª„Éá‚ïê‚ïê‚îÅüí•  („Å£‚óî‚ó°‚óî)„Å£ üéÆ\n"
    "(–±–æ—Ç –Ω–µ –≤–∑–æ—Ä–≤—ë—Ç—Å—è –æ—Ç –∫—Ä–∏—Ç–∏–∫–∏, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ)",
    reply_markup=kb.main)

@router.message(F.text == "–Ø –Ω–µ —Ö–æ—á—É")
async def back_handler_ne_hochu(message: Message):
    await message.answer(
        "–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥!",
        reply_markup=kb.main  
    )

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router.message(F.text)
async def handle_text_formula_or_search(message: Message):
    user_id = message.from_user.id
    text = message.text

    if user_states.get(user_id) == 'search':
        query = text.lower().strip()
        if not query:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            return

        matches = process.extract(query, SEARCH_KEYWORDS, limit=5, scorer=fuzz.token_sort_ratio)
        matches = [match[0] for match in matches if match[1] > 50]

        if not matches:
            await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        else:
            buttons = [[KeyboardButton(text=match)] for match in matches]
            buttons.append([KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
            await message.answer(
                "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
                reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
            )
        # –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω –ø–æ–∏—Å–∫, –∏–ª–∏ –≤ main
        # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–µ–∫–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ main
        user_states[user_id] = 'main'
        user_state_stack[user_id] = ['main']
        return
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ/–∫–Ω–æ–ø–∫–µ
    # (–∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ, –∫–∞–∫ "–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ —Ç.–¥.)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å.
    # await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

"""
